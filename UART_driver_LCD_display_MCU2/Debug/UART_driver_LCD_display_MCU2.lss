
UART_driver_LCD_display_MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000212c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000212c  000021a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001998  00000000  00000000  000021b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e28  00000000  00000000  00003b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004970  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006869  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007754  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000088f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000090bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 94 10 	jmp	0x2128	; 0x2128 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include"lcd.h"

#define MCU2_IS_READY  0x10

int main(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	6f 97       	sbiw	r28, 0x1f	; 31
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	uint8 Str[20];
	uint8 data;
	uart_ConfigType uart_configuration = { BAUD_RATE_9600,_8BIT_MODE,_1STOP_BIT,DISABLED};
     b4a:	ce 01       	movw	r24, r28
     b4c:	46 96       	adiw	r24, 0x16	; 22
     b4e:	9c 8f       	std	Y+28, r25	; 0x1c
     b50:	8b 8f       	std	Y+27, r24	; 0x1b
     b52:	e8 e6       	ldi	r30, 0x68	; 104
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	fe 8f       	std	Y+30, r31	; 0x1e
     b58:	ed 8f       	std	Y+29, r30	; 0x1d
     b5a:	f5 e0       	ldi	r31, 0x05	; 5
     b5c:	ff 8f       	std	Y+31, r31	; 0x1f
     b5e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     b60:	fe 8d       	ldd	r31, Y+30	; 0x1e
     b62:	00 80       	ld	r0, Z
     b64:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b66:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	9e 8f       	std	Y+30, r25	; 0x1e
     b6c:	8d 8f       	std	Y+29, r24	; 0x1d
     b6e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b70:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b72:	00 82       	st	Z, r0
     b74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b76:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9c 8f       	std	Y+28, r25	; 0x1c
     b7c:	8b 8f       	std	Y+27, r24	; 0x1b
     b7e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b80:	91 50       	subi	r25, 0x01	; 1
     b82:	9f 8f       	std	Y+31, r25	; 0x1f
     b84:	ef 8d       	ldd	r30, Y+31	; 0x1f
     b86:	ee 23       	and	r30, r30
     b88:	51 f7       	brne	.-44     	; 0xb5e <main+0x28>

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(&uart_configuration);
     b8a:	ce 01       	movw	r24, r28
     b8c:	46 96       	adiw	r24, 0x16	; 22
     b8e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <UART_init>

	LCD_init();
     b92:	0e 94 15 09 	call	0x122a	; 0x122a <LCD_init>


	/* Send MC2_READY byte to MC1 to ask it to send the string */
	UART_sendByte(MCU2_IS_READY);
     b96:	80 e1       	ldi	r24, 0x10	; 16
     b98:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <UART_sendByte>

	/* Receive String from MC1 through UART */
	UART_receiveString(Str);
     b9c:	ce 01       	movw	r24, r28
     b9e:	02 96       	adiw	r24, 0x02	; 2
     ba0:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <UART_receiveString>

	/* Display the received string on the LCD display */
	LCD_displayString(Str);
     ba4:	ce 01       	movw	r24, r28
     ba6:	02 96       	adiw	r24, 0x02	; 2
     ba8:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <LCD_displayString>
     bac:	ff cf       	rjmp	.-2      	; 0xbac <main+0x76>

00000bae <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     bae:	df 93       	push	r29
     bb0:	cf 93       	push	r28
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <GPIO_setupPinDirection+0x6>
     bb4:	00 d0       	rcall	.+0      	; 0xbb6 <GPIO_setupPinDirection+0x8>
     bb6:	0f 92       	push	r0
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	6a 83       	std	Y+2, r22	; 0x02
     bc0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	88 30       	cpi	r24, 0x08	; 8
     bc6:	08 f0       	brcs	.+2      	; 0xbca <GPIO_setupPinDirection+0x1c>
     bc8:	d5 c0       	rjmp	.+426    	; 0xd74 <GPIO_setupPinDirection+0x1c6>
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	08 f0       	brcs	.+2      	; 0xbd2 <GPIO_setupPinDirection+0x24>
     bd0:	d1 c0       	rjmp	.+418    	; 0xd74 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	3d 83       	std	Y+5, r19	; 0x05
     bda:	2c 83       	std	Y+4, r18	; 0x04
     bdc:	8c 81       	ldd	r24, Y+4	; 0x04
     bde:	9d 81       	ldd	r25, Y+5	; 0x05
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	91 05       	cpc	r25, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <GPIO_setupPinDirection+0x3a>
     be6:	43 c0       	rjmp	.+134    	; 0xc6e <GPIO_setupPinDirection+0xc0>
     be8:	2c 81       	ldd	r18, Y+4	; 0x04
     bea:	3d 81       	ldd	r19, Y+5	; 0x05
     bec:	22 30       	cpi	r18, 0x02	; 2
     bee:	31 05       	cpc	r19, r1
     bf0:	2c f4       	brge	.+10     	; 0xbfc <GPIO_setupPinDirection+0x4e>
     bf2:	8c 81       	ldd	r24, Y+4	; 0x04
     bf4:	9d 81       	ldd	r25, Y+5	; 0x05
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	71 f0       	breq	.+28     	; 0xc16 <GPIO_setupPinDirection+0x68>
     bfa:	bc c0       	rjmp	.+376    	; 0xd74 <GPIO_setupPinDirection+0x1c6>
     bfc:	2c 81       	ldd	r18, Y+4	; 0x04
     bfe:	3d 81       	ldd	r19, Y+5	; 0x05
     c00:	22 30       	cpi	r18, 0x02	; 2
     c02:	31 05       	cpc	r19, r1
     c04:	09 f4       	brne	.+2      	; 0xc08 <GPIO_setupPinDirection+0x5a>
     c06:	5f c0       	rjmp	.+190    	; 0xcc6 <GPIO_setupPinDirection+0x118>
     c08:	8c 81       	ldd	r24, Y+4	; 0x04
     c0a:	9d 81       	ldd	r25, Y+5	; 0x05
     c0c:	83 30       	cpi	r24, 0x03	; 3
     c0e:	91 05       	cpc	r25, r1
     c10:	09 f4       	brne	.+2      	; 0xc14 <GPIO_setupPinDirection+0x66>
     c12:	85 c0       	rjmp	.+266    	; 0xd1e <GPIO_setupPinDirection+0x170>
     c14:	af c0       	rjmp	.+350    	; 0xd74 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	a1 f4       	brne	.+40     	; 0xc44 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA_REG,pin_num);
     c1c:	aa e3       	ldi	r26, 0x3A	; 58
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	ea e3       	ldi	r30, 0x3A	; 58
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	48 2f       	mov	r20, r24
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	02 2e       	mov	r0, r18
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <GPIO_setupPinDirection+0x8c>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	0a 94       	dec	r0
     c3c:	e2 f7       	brpl	.-8      	; 0xc36 <GPIO_setupPinDirection+0x88>
     c3e:	84 2b       	or	r24, r20
     c40:	8c 93       	st	X, r24
     c42:	98 c0       	rjmp	.+304    	; 0xd74 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA_REG,pin_num);
     c44:	aa e3       	ldi	r26, 0x3A	; 58
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	ea e3       	ldi	r30, 0x3A	; 58
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	48 2f       	mov	r20, r24
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 2e       	mov	r0, r18
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <GPIO_setupPinDirection+0xb4>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <GPIO_setupPinDirection+0xb0>
     c66:	80 95       	com	r24
     c68:	84 23       	and	r24, r20
     c6a:	8c 93       	st	X, r24
     c6c:	83 c0       	rjmp	.+262    	; 0xd74 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	a1 f4       	brne	.+40     	; 0xc9c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB_REG,pin_num);
     c74:	a7 e3       	ldi	r26, 0x37	; 55
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e7 e3       	ldi	r30, 0x37	; 55
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <GPIO_setupPinDirection+0xe4>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <GPIO_setupPinDirection+0xe0>
     c96:	84 2b       	or	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	6c c0       	rjmp	.+216    	; 0xd74 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB_REG,pin_num);
     c9c:	a7 e3       	ldi	r26, 0x37	; 55
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e7 e3       	ldi	r30, 0x37	; 55
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	48 2f       	mov	r20, r24
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	02 2e       	mov	r0, r18
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <GPIO_setupPinDirection+0x10c>
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	0a 94       	dec	r0
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <GPIO_setupPinDirection+0x108>
     cbe:	80 95       	com	r24
     cc0:	84 23       	and	r24, r20
     cc2:	8c 93       	st	X, r24
     cc4:	57 c0       	rjmp	.+174    	; 0xd74 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	a1 f4       	brne	.+40     	; 0xcf4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC_REG,pin_num);
     ccc:	a4 e3       	ldi	r26, 0x34	; 52
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e4 e3       	ldi	r30, 0x34	; 52
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	48 2f       	mov	r20, r24
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 2e       	mov	r0, r18
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <GPIO_setupPinDirection+0x13c>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <GPIO_setupPinDirection+0x138>
     cee:	84 2b       	or	r24, r20
     cf0:	8c 93       	st	X, r24
     cf2:	40 c0       	rjmp	.+128    	; 0xd74 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC_REG,pin_num);
     cf4:	a4 e3       	ldi	r26, 0x34	; 52
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e4 e3       	ldi	r30, 0x34	; 52
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 2e       	mov	r0, r18
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <GPIO_setupPinDirection+0x164>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <GPIO_setupPinDirection+0x160>
     d16:	80 95       	com	r24
     d18:	84 23       	and	r24, r20
     d1a:	8c 93       	st	X, r24
     d1c:	2b c0       	rjmp	.+86     	; 0xd74 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	a1 f4       	brne	.+40     	; 0xd4c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD_REG,pin_num);
     d24:	a1 e3       	ldi	r26, 0x31	; 49
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e1 e3       	ldi	r30, 0x31	; 49
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	48 2f       	mov	r20, r24
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	02 2e       	mov	r0, r18
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <GPIO_setupPinDirection+0x194>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <GPIO_setupPinDirection+0x190>
     d46:	84 2b       	or	r24, r20
     d48:	8c 93       	st	X, r24
     d4a:	14 c0       	rjmp	.+40     	; 0xd74 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD_REG,pin_num);
     d4c:	a1 e3       	ldi	r26, 0x31	; 49
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e1 e3       	ldi	r30, 0x31	; 49
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	48 2f       	mov	r20, r24
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	02 2e       	mov	r0, r18
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <GPIO_setupPinDirection+0x1bc>
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	0a 94       	dec	r0
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <GPIO_setupPinDirection+0x1b8>
     d6e:	80 95       	com	r24
     d70:	84 23       	and	r24, r20
     d72:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	00 d0       	rcall	.+0      	; 0xd8a <GPIO_writePin+0x6>
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <GPIO_writePin+0x8>
     d8c:	0f 92       	push	r0
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	6a 83       	std	Y+2, r22	; 0x02
     d96:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	88 30       	cpi	r24, 0x08	; 8
     d9c:	08 f0       	brcs	.+2      	; 0xda0 <GPIO_writePin+0x1c>
     d9e:	d5 c0       	rjmp	.+426    	; 0xf4a <GPIO_writePin+0x1c6>
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	84 30       	cpi	r24, 0x04	; 4
     da4:	08 f0       	brcs	.+2      	; 0xda8 <GPIO_writePin+0x24>
     da6:	d1 c0       	rjmp	.+418    	; 0xf4a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	3d 83       	std	Y+5, r19	; 0x05
     db0:	2c 83       	std	Y+4, r18	; 0x04
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	9d 81       	ldd	r25, Y+5	; 0x05
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	91 05       	cpc	r25, r1
     dba:	09 f4       	brne	.+2      	; 0xdbe <GPIO_writePin+0x3a>
     dbc:	43 c0       	rjmp	.+134    	; 0xe44 <GPIO_writePin+0xc0>
     dbe:	2c 81       	ldd	r18, Y+4	; 0x04
     dc0:	3d 81       	ldd	r19, Y+5	; 0x05
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	31 05       	cpc	r19, r1
     dc6:	2c f4       	brge	.+10     	; 0xdd2 <GPIO_writePin+0x4e>
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	9d 81       	ldd	r25, Y+5	; 0x05
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	71 f0       	breq	.+28     	; 0xdec <GPIO_writePin+0x68>
     dd0:	bc c0       	rjmp	.+376    	; 0xf4a <GPIO_writePin+0x1c6>
     dd2:	2c 81       	ldd	r18, Y+4	; 0x04
     dd4:	3d 81       	ldd	r19, Y+5	; 0x05
     dd6:	22 30       	cpi	r18, 0x02	; 2
     dd8:	31 05       	cpc	r19, r1
     dda:	09 f4       	brne	.+2      	; 0xdde <GPIO_writePin+0x5a>
     ddc:	5f c0       	rjmp	.+190    	; 0xe9c <GPIO_writePin+0x118>
     dde:	8c 81       	ldd	r24, Y+4	; 0x04
     de0:	9d 81       	ldd	r25, Y+5	; 0x05
     de2:	83 30       	cpi	r24, 0x03	; 3
     de4:	91 05       	cpc	r25, r1
     de6:	09 f4       	brne	.+2      	; 0xdea <GPIO_writePin+0x66>
     de8:	85 c0       	rjmp	.+266    	; 0xef4 <GPIO_writePin+0x170>
     dea:	af c0       	rjmp	.+350    	; 0xf4a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	a1 f4       	brne	.+40     	; 0xe1a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA_REG,pin_num);
     df2:	ab e3       	ldi	r26, 0x3B	; 59
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	eb e3       	ldi	r30, 0x3B	; 59
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <GPIO_writePin+0x8c>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <GPIO_writePin+0x88>
     e14:	84 2b       	or	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	98 c0       	rjmp	.+304    	; 0xf4a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA_REG,pin_num);
     e1a:	ab e3       	ldi	r26, 0x3B	; 59
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	eb e3       	ldi	r30, 0x3B	; 59
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <GPIO_writePin+0xb4>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <GPIO_writePin+0xb0>
     e3c:	80 95       	com	r24
     e3e:	84 23       	and	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	83 c0       	rjmp	.+262    	; 0xf4a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	a1 f4       	brne	.+40     	; 0xe72 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB_REG,pin_num);
     e4a:	a8 e3       	ldi	r26, 0x38	; 56
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e8 e3       	ldi	r30, 0x38	; 56
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <GPIO_writePin+0xe4>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <GPIO_writePin+0xe0>
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	6c c0       	rjmp	.+216    	; 0xf4a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB_REG,pin_num);
     e72:	a8 e3       	ldi	r26, 0x38	; 56
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e8 e3       	ldi	r30, 0x38	; 56
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <GPIO_writePin+0x10c>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <GPIO_writePin+0x108>
     e94:	80 95       	com	r24
     e96:	84 23       	and	r24, r20
     e98:	8c 93       	st	X, r24
     e9a:	57 c0       	rjmp	.+174    	; 0xf4a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	a1 f4       	brne	.+40     	; 0xeca <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC_REG,pin_num);
     ea2:	a5 e3       	ldi	r26, 0x35	; 53
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e5 e3       	ldi	r30, 0x35	; 53
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	48 2f       	mov	r20, r24
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	02 2e       	mov	r0, r18
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <GPIO_writePin+0x13c>
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	0a 94       	dec	r0
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <GPIO_writePin+0x138>
     ec4:	84 2b       	or	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	40 c0       	rjmp	.+128    	; 0xf4a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC_REG,pin_num);
     eca:	a5 e3       	ldi	r26, 0x35	; 53
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e5 e3       	ldi	r30, 0x35	; 53
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <GPIO_writePin+0x164>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <GPIO_writePin+0x160>
     eec:	80 95       	com	r24
     eee:	84 23       	and	r24, r20
     ef0:	8c 93       	st	X, r24
     ef2:	2b c0       	rjmp	.+86     	; 0xf4a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	a1 f4       	brne	.+40     	; 0xf22 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD_REG,pin_num);
     efa:	a2 e3       	ldi	r26, 0x32	; 50
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e2 e3       	ldi	r30, 0x32	; 50
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <GPIO_writePin+0x194>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <GPIO_writePin+0x190>
     f1c:	84 2b       	or	r24, r20
     f1e:	8c 93       	st	X, r24
     f20:	14 c0       	rjmp	.+40     	; 0xf4a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD_REG,pin_num);
     f22:	a2 e3       	ldi	r26, 0x32	; 50
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e2 e3       	ldi	r30, 0x32	; 50
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	48 2f       	mov	r20, r24
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 2e       	mov	r0, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <GPIO_writePin+0x1bc>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <GPIO_writePin+0x1b8>
     f44:	80 95       	com	r24
     f46:	84 23       	and	r24, r20
     f48:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <GPIO_readPin+0x6>
     f60:	00 d0       	rcall	.+0      	; 0xf62 <GPIO_readPin+0x8>
     f62:	0f 92       	push	r0
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	8a 83       	std	Y+2, r24	; 0x02
     f6a:	6b 83       	std	Y+3, r22	; 0x03

	uint8 pin_value = LOGIC_LOW;
     f6c:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	88 30       	cpi	r24, 0x08	; 8
     f72:	08 f0       	brcs	.+2      	; 0xf76 <GPIO_readPin+0x1c>
     f74:	84 c0       	rjmp	.+264    	; 0x107e <GPIO_readPin+0x124>
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	84 30       	cpi	r24, 0x04	; 4
     f7a:	08 f0       	brcs	.+2      	; 0xf7e <GPIO_readPin+0x24>
     f7c:	80 c0       	rjmp	.+256    	; 0x107e <GPIO_readPin+0x124>
		/* Do Nothing  */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	3d 83       	std	Y+5, r19	; 0x05
     f86:	2c 83       	std	Y+4, r18	; 0x04
     f88:	4c 81       	ldd	r20, Y+4	; 0x04
     f8a:	5d 81       	ldd	r21, Y+5	; 0x05
     f8c:	41 30       	cpi	r20, 0x01	; 1
     f8e:	51 05       	cpc	r21, r1
     f90:	79 f1       	breq	.+94     	; 0xff0 <GPIO_readPin+0x96>
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	9d 81       	ldd	r25, Y+5	; 0x05
     f96:	82 30       	cpi	r24, 0x02	; 2
     f98:	91 05       	cpc	r25, r1
     f9a:	34 f4       	brge	.+12     	; 0xfa8 <GPIO_readPin+0x4e>
     f9c:	2c 81       	ldd	r18, Y+4	; 0x04
     f9e:	3d 81       	ldd	r19, Y+5	; 0x05
     fa0:	21 15       	cp	r18, r1
     fa2:	31 05       	cpc	r19, r1
     fa4:	69 f0       	breq	.+26     	; 0xfc0 <GPIO_readPin+0x66>
     fa6:	6b c0       	rjmp	.+214    	; 0x107e <GPIO_readPin+0x124>
     fa8:	4c 81       	ldd	r20, Y+4	; 0x04
     faa:	5d 81       	ldd	r21, Y+5	; 0x05
     fac:	42 30       	cpi	r20, 0x02	; 2
     fae:	51 05       	cpc	r21, r1
     fb0:	b9 f1       	breq	.+110    	; 0x1020 <GPIO_readPin+0xc6>
     fb2:	8c 81       	ldd	r24, Y+4	; 0x04
     fb4:	9d 81       	ldd	r25, Y+5	; 0x05
     fb6:	83 30       	cpi	r24, 0x03	; 3
     fb8:	91 05       	cpc	r25, r1
     fba:	09 f4       	brne	.+2      	; 0xfbe <GPIO_readPin+0x64>
     fbc:	49 c0       	rjmp	.+146    	; 0x1050 <GPIO_readPin+0xf6>
     fbe:	5f c0       	rjmp	.+190    	; 0x107e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA_REG,pin_num))
     fc0:	e9 e3       	ldi	r30, 0x39	; 57
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a9 01       	movw	r20, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <GPIO_readPin+0x7e>
     fd4:	55 95       	asr	r21
     fd6:	47 95       	ror	r20
     fd8:	8a 95       	dec	r24
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <GPIO_readPin+0x7a>
     fdc:	ca 01       	movw	r24, r20
     fde:	81 70       	andi	r24, 0x01	; 1
     fe0:	90 70       	andi	r25, 0x00	; 0
     fe2:	88 23       	and	r24, r24
     fe4:	19 f0       	breq	.+6      	; 0xfec <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	49 c0       	rjmp	.+146    	; 0x107e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fec:	19 82       	std	Y+1, r1	; 0x01
     fee:	47 c0       	rjmp	.+142    	; 0x107e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB_REG,pin_num))
     ff0:	e6 e3       	ldi	r30, 0x36	; 54
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a9 01       	movw	r20, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <GPIO_readPin+0xae>
    1004:	55 95       	asr	r21
    1006:	47 95       	ror	r20
    1008:	8a 95       	dec	r24
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <GPIO_readPin+0xaa>
    100c:	ca 01       	movw	r24, r20
    100e:	81 70       	andi	r24, 0x01	; 1
    1010:	90 70       	andi	r25, 0x00	; 0
    1012:	88 23       	and	r24, r24
    1014:	19 f0       	breq	.+6      	; 0x101c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	31 c0       	rjmp	.+98     	; 0x107e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    101c:	19 82       	std	Y+1, r1	; 0x01
    101e:	2f c0       	rjmp	.+94     	; 0x107e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC_REG,pin_num))
    1020:	e3 e3       	ldi	r30, 0x33	; 51
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a9 01       	movw	r20, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <GPIO_readPin+0xde>
    1034:	55 95       	asr	r21
    1036:	47 95       	ror	r20
    1038:	8a 95       	dec	r24
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <GPIO_readPin+0xda>
    103c:	ca 01       	movw	r24, r20
    103e:	81 70       	andi	r24, 0x01	; 1
    1040:	90 70       	andi	r25, 0x00	; 0
    1042:	88 23       	and	r24, r24
    1044:	19 f0       	breq	.+6      	; 0x104c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	19 c0       	rjmp	.+50     	; 0x107e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    104c:	19 82       	std	Y+1, r1	; 0x01
    104e:	17 c0       	rjmp	.+46     	; 0x107e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND_REG,pin_num))
    1050:	e0 e3       	ldi	r30, 0x30	; 48
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a9 01       	movw	r20, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <GPIO_readPin+0x10e>
    1064:	55 95       	asr	r21
    1066:	47 95       	ror	r20
    1068:	8a 95       	dec	r24
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <GPIO_readPin+0x10a>
    106c:	ca 01       	movw	r24, r20
    106e:	81 70       	andi	r24, 0x01	; 1
    1070:	90 70       	andi	r25, 0x00	; 0
    1072:	88 23       	and	r24, r24
    1074:	19 f0       	breq	.+6      	; 0x107c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	01 c0       	rjmp	.+2      	; 0x107e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    107c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <GPIO_setupPortDirection+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <GPIO_setupPortDirection+0x8>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	84 30       	cpi	r24, 0x04	; 4
    10a4:	90 f5       	brcc	.+100    	; 0x110a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	3c 83       	std	Y+4, r19	; 0x04
    10ae:	2b 83       	std	Y+3, r18	; 0x03
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	91 05       	cpc	r25, r1
    10b8:	d1 f0       	breq	.+52     	; 0x10ee <GPIO_setupPortDirection+0x5e>
    10ba:	2b 81       	ldd	r18, Y+3	; 0x03
    10bc:	3c 81       	ldd	r19, Y+4	; 0x04
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	2c f4       	brge	.+10     	; 0x10ce <GPIO_setupPortDirection+0x3e>
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <GPIO_setupPortDirection+0x54>
    10cc:	1e c0       	rjmp	.+60     	; 0x110a <GPIO_setupPortDirection+0x7a>
    10ce:	2b 81       	ldd	r18, Y+3	; 0x03
    10d0:	3c 81       	ldd	r19, Y+4	; 0x04
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	81 f0       	breq	.+32     	; 0x10f8 <GPIO_setupPortDirection+0x68>
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	91 05       	cpc	r25, r1
    10e0:	81 f0       	breq	.+32     	; 0x1102 <GPIO_setupPortDirection+0x72>
    10e2:	13 c0       	rjmp	.+38     	; 0x110a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA_REG = direction;
    10e4:	ea e3       	ldi	r30, 0x3A	; 58
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	80 83       	st	Z, r24
    10ec:	0e c0       	rjmp	.+28     	; 0x110a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG = direction;
    10ee:	e7 e3       	ldi	r30, 0x37	; 55
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	80 83       	st	Z, r24
    10f6:	09 c0       	rjmp	.+18     	; 0x110a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG = direction;
    10f8:	e4 e3       	ldi	r30, 0x34	; 52
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	80 83       	st	Z, r24
    1100:	04 c0       	rjmp	.+8      	; 0x110a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG = direction;
    1102:	e1 e3       	ldi	r30, 0x31	; 49
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	80 83       	st	Z, r24
			break;
		}
	}
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <GPIO_writePort+0x6>
    111e:	00 d0       	rcall	.+0      	; 0x1120 <GPIO_writePort+0x8>
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	90 f5       	brcc	.+100    	; 0x1192 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	3c 83       	std	Y+4, r19	; 0x04
    1136:	2b 83       	std	Y+3, r18	; 0x03
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	91 05       	cpc	r25, r1
    1140:	d1 f0       	breq	.+52     	; 0x1176 <GPIO_writePort+0x5e>
    1142:	2b 81       	ldd	r18, Y+3	; 0x03
    1144:	3c 81       	ldd	r19, Y+4	; 0x04
    1146:	22 30       	cpi	r18, 0x02	; 2
    1148:	31 05       	cpc	r19, r1
    114a:	2c f4       	brge	.+10     	; 0x1156 <GPIO_writePort+0x3e>
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	9c 81       	ldd	r25, Y+4	; 0x04
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	61 f0       	breq	.+24     	; 0x116c <GPIO_writePort+0x54>
    1154:	1e c0       	rjmp	.+60     	; 0x1192 <GPIO_writePort+0x7a>
    1156:	2b 81       	ldd	r18, Y+3	; 0x03
    1158:	3c 81       	ldd	r19, Y+4	; 0x04
    115a:	22 30       	cpi	r18, 0x02	; 2
    115c:	31 05       	cpc	r19, r1
    115e:	81 f0       	breq	.+32     	; 0x1180 <GPIO_writePort+0x68>
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	9c 81       	ldd	r25, Y+4	; 0x04
    1164:	83 30       	cpi	r24, 0x03	; 3
    1166:	91 05       	cpc	r25, r1
    1168:	81 f0       	breq	.+32     	; 0x118a <GPIO_writePort+0x72>
    116a:	13 c0       	rjmp	.+38     	; 0x1192 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG = value ;
    116c:	eb e3       	ldi	r30, 0x3B	; 59
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	80 83       	st	Z, r24
    1174:	0e c0       	rjmp	.+28     	; 0x1192 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG = value ;
    1176:	e8 e3       	ldi	r30, 0x38	; 56
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	80 83       	st	Z, r24
    117e:	09 c0       	rjmp	.+18     	; 0x1192 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG = value ;
    1180:	e5 e3       	ldi	r30, 0x35	; 53
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	80 83       	st	Z, r24
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG = value ;
    118a:	e2 e3       	ldi	r30, 0x32	; 50
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	80 83       	st	Z, r24
			break;
		}
	}
}
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <GPIO_readPort>:
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */

uint8 GPIO_readPort(uint8 port_num)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <GPIO_readPort+0x6>
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <GPIO_readPort+0x8>
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    11ae:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if((port_num >= NUM_OF_PORTS))
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	84 30       	cpi	r24, 0x04	; 4
    11b4:	90 f5       	brcc	.+100    	; 0x121a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	3c 83       	std	Y+4, r19	; 0x04
    11be:	2b 83       	std	Y+3, r18	; 0x03
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	91 05       	cpc	r25, r1
    11c8:	d1 f0       	breq	.+52     	; 0x11fe <GPIO_readPort+0x5e>
    11ca:	2b 81       	ldd	r18, Y+3	; 0x03
    11cc:	3c 81       	ldd	r19, Y+4	; 0x04
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	31 05       	cpc	r19, r1
    11d2:	2c f4       	brge	.+10     	; 0x11de <GPIO_readPort+0x3e>
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	61 f0       	breq	.+24     	; 0x11f4 <GPIO_readPort+0x54>
    11dc:	1e c0       	rjmp	.+60     	; 0x121a <GPIO_readPort+0x7a>
    11de:	2b 81       	ldd	r18, Y+3	; 0x03
    11e0:	3c 81       	ldd	r19, Y+4	; 0x04
    11e2:	22 30       	cpi	r18, 0x02	; 2
    11e4:	31 05       	cpc	r19, r1
    11e6:	81 f0       	breq	.+32     	; 0x1208 <GPIO_readPort+0x68>
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	83 30       	cpi	r24, 0x03	; 3
    11ee:	91 05       	cpc	r25, r1
    11f0:	81 f0       	breq	.+32     	; 0x1212 <GPIO_readPort+0x72>
    11f2:	13 c0       	rjmp	.+38     	; 0x121a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA_REG;
    11f4:	e9 e3       	ldi	r30, 0x39	; 57
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	0e c0       	rjmp	.+28     	; 0x121a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB_REG ;
    11fe:	e6 e3       	ldi	r30, 0x36	; 54
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	09 c0       	rjmp	.+18     	; 0x121a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC_REG;
    1208:	e3 e3       	ldi	r30, 0x33	; 51
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	04 c0       	rjmp	.+8      	; 0x121a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND_REG;
    1212:	e0 e3       	ldi	r30, 0x30	; 48
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    121a:	89 81       	ldd	r24, Y+1	; 0x01
}
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <LCD_init>:
 * Initialize LCD :
 * 1.by setting up the direction using GPIO driver
 * 2.set up LCD data bit mode 8bit or 4bit mode
 * */
void LCD_init(void)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	6c 97       	sbiw	r28, 0x1c	; 28
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	64 e0       	ldi	r22, 0x04	; 4
    1242:	41 e0       	ldi	r20, 0x01	; 1
    1244:	0e 94 d7 05 	call	0xbae	; 0xbae <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	65 e0       	ldi	r22, 0x05	; 5
    124c:	41 e0       	ldi	r20, 0x01	; 1
    124e:	0e 94 d7 05 	call	0xbae	; 0xbae <GPIO_setupPinDirection>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	a0 ea       	ldi	r26, 0xA0	; 160
    1258:	b1 e4       	ldi	r27, 0x41	; 65
    125a:	89 8f       	std	Y+25, r24	; 0x19
    125c:	9a 8f       	std	Y+26, r25	; 0x1a
    125e:	ab 8f       	std	Y+27, r26	; 0x1b
    1260:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1262:	69 8d       	ldd	r22, Y+25	; 0x19
    1264:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1266:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1268:	9c 8d       	ldd	r25, Y+28	; 0x1c
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	4a e7       	ldi	r20, 0x7A	; 122
    1270:	53 e4       	ldi	r21, 0x43	; 67
    1272:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	8d 8b       	std	Y+21, r24	; 0x15
    127c:	9e 8b       	std	Y+22, r25	; 0x16
    127e:	af 8b       	std	Y+23, r26	; 0x17
    1280:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1282:	6d 89       	ldd	r22, Y+21	; 0x15
    1284:	7e 89       	ldd	r23, Y+22	; 0x16
    1286:	8f 89       	ldd	r24, Y+23	; 0x17
    1288:	98 8d       	ldd	r25, Y+24	; 0x18
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e8       	ldi	r20, 0x80	; 128
    1290:	5f e3       	ldi	r21, 0x3F	; 63
    1292:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1296:	88 23       	and	r24, r24
    1298:	2c f4       	brge	.+10     	; 0x12a4 <LCD_init+0x7a>
		__ticks = 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	9c 8b       	std	Y+20, r25	; 0x14
    12a0:	8b 8b       	std	Y+19, r24	; 0x13
    12a2:	3f c0       	rjmp	.+126    	; 0x1322 <LCD_init+0xf8>
	else if (__tmp > 65535)
    12a4:	6d 89       	ldd	r22, Y+21	; 0x15
    12a6:	7e 89       	ldd	r23, Y+22	; 0x16
    12a8:	8f 89       	ldd	r24, Y+23	; 0x17
    12aa:	98 8d       	ldd	r25, Y+24	; 0x18
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	3f ef       	ldi	r19, 0xFF	; 255
    12b0:	4f e7       	ldi	r20, 0x7F	; 127
    12b2:	57 e4       	ldi	r21, 0x47	; 71
    12b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12b8:	18 16       	cp	r1, r24
    12ba:	4c f5       	brge	.+82     	; 0x130e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12bc:	69 8d       	ldd	r22, Y+25	; 0x19
    12be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e2       	ldi	r20, 0x20	; 32
    12ca:	51 e4       	ldi	r21, 0x41	; 65
    12cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	9c 8b       	std	Y+20, r25	; 0x14
    12e2:	8b 8b       	std	Y+19, r24	; 0x13
    12e4:	0f c0       	rjmp	.+30     	; 0x1304 <LCD_init+0xda>
    12e6:	89 e1       	ldi	r24, 0x19	; 25
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	9a 8b       	std	Y+18, r25	; 0x12
    12ec:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12ee:	89 89       	ldd	r24, Y+17	; 0x11
    12f0:	9a 89       	ldd	r25, Y+18	; 0x12
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <LCD_init+0xc8>
    12f6:	9a 8b       	std	Y+18, r25	; 0x12
    12f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fa:	8b 89       	ldd	r24, Y+19	; 0x13
    12fc:	9c 89       	ldd	r25, Y+20	; 0x14
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	9c 8b       	std	Y+20, r25	; 0x14
    1302:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1304:	8b 89       	ldd	r24, Y+19	; 0x13
    1306:	9c 89       	ldd	r25, Y+20	; 0x14
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	69 f7       	brne	.-38     	; 0x12e6 <LCD_init+0xbc>
    130c:	14 c0       	rjmp	.+40     	; 0x1336 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130e:	6d 89       	ldd	r22, Y+21	; 0x15
    1310:	7e 89       	ldd	r23, Y+22	; 0x16
    1312:	8f 89       	ldd	r24, Y+23	; 0x17
    1314:	98 8d       	ldd	r25, Y+24	; 0x18
    1316:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9c 8b       	std	Y+20, r25	; 0x14
    1320:	8b 8b       	std	Y+19, r24	; 0x13
    1322:	8b 89       	ldd	r24, Y+19	; 0x13
    1324:	9c 89       	ldd	r25, Y+20	; 0x14
    1326:	98 8b       	std	Y+16, r25	; 0x10
    1328:	8f 87       	std	Y+15, r24	; 0x0f
    132a:	8f 85       	ldd	r24, Y+15	; 0x0f
    132c:	98 89       	ldd	r25, Y+16	; 0x10
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <LCD_init+0x104>
    1332:	98 8b       	std	Y+16, r25	; 0x10
    1334:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif (LCD_DATA_BITS_MODE == 8)

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1336:	82 e0       	ldi	r24, 0x02	; 2
    1338:	6f ef       	ldi	r22, 0xFF	; 255
    133a:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_setupPortDirection>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a0 ea       	ldi	r26, 0xA0	; 160
    1344:	b1 e4       	ldi	r27, 0x41	; 65
    1346:	8b 87       	std	Y+11, r24	; 0x0b
    1348:	9c 87       	std	Y+12, r25	; 0x0c
    134a:	ad 87       	std	Y+13, r26	; 0x0d
    134c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1350:	7c 85       	ldd	r23, Y+12	; 0x0c
    1352:	8d 85       	ldd	r24, Y+13	; 0x0d
    1354:	9e 85       	ldd	r25, Y+14	; 0x0e
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	4a e7       	ldi	r20, 0x7A	; 122
    135c:	53 e4       	ldi	r21, 0x43	; 67
    135e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	8f 83       	std	Y+7, r24	; 0x07
    1368:	98 87       	std	Y+8, r25	; 0x08
    136a:	a9 87       	std	Y+9, r26	; 0x09
    136c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    136e:	6f 81       	ldd	r22, Y+7	; 0x07
    1370:	78 85       	ldd	r23, Y+8	; 0x08
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	9a 85       	ldd	r25, Y+10	; 0x0a
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e8       	ldi	r20, 0x80	; 128
    137c:	5f e3       	ldi	r21, 0x3F	; 63
    137e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1382:	88 23       	and	r24, r24
    1384:	2c f4       	brge	.+10     	; 0x1390 <LCD_init+0x166>
		__ticks = 1;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	9e 83       	std	Y+6, r25	; 0x06
    138c:	8d 83       	std	Y+5, r24	; 0x05
    138e:	3f c0       	rjmp	.+126    	; 0x140e <LCD_init+0x1e4>
	else if (__tmp > 65535)
    1390:	6f 81       	ldd	r22, Y+7	; 0x07
    1392:	78 85       	ldd	r23, Y+8	; 0x08
    1394:	89 85       	ldd	r24, Y+9	; 0x09
    1396:	9a 85       	ldd	r25, Y+10	; 0x0a
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	3f ef       	ldi	r19, 0xFF	; 255
    139c:	4f e7       	ldi	r20, 0x7F	; 127
    139e:	57 e4       	ldi	r21, 0x47	; 71
    13a0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13a4:	18 16       	cp	r1, r24
    13a6:	4c f5       	brge	.+82     	; 0x13fa <LCD_init+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e2       	ldi	r20, 0x20	; 32
    13b6:	51 e4       	ldi	r21, 0x41	; 65
    13b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	bc 01       	movw	r22, r24
    13c2:	cd 01       	movw	r24, r26
    13c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	9e 83       	std	Y+6, r25	; 0x06
    13ce:	8d 83       	std	Y+5, r24	; 0x05
    13d0:	0f c0       	rjmp	.+30     	; 0x13f0 <LCD_init+0x1c6>
    13d2:	89 e1       	ldi	r24, 0x19	; 25
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9c 83       	std	Y+4, r25	; 0x04
    13d8:	8b 83       	std	Y+3, r24	; 0x03
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	f1 f7       	brne	.-4      	; 0x13de <LCD_init+0x1b4>
    13e2:	9c 83       	std	Y+4, r25	; 0x04
    13e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	69 f7       	brne	.-38     	; 0x13d2 <LCD_init+0x1a8>
    13f8:	14 c0       	rjmp	.+40     	; 0x1422 <LCD_init+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fa:	6f 81       	ldd	r22, Y+7	; 0x07
    13fc:	78 85       	ldd	r23, Y+8	; 0x08
    13fe:	89 85       	ldd	r24, Y+9	; 0x09
    1400:	9a 85       	ldd	r25, Y+10	; 0x0a
    1402:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 83       	std	Y+5, r24	; 0x05
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	9a 83       	std	Y+2, r25	; 0x02
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	9a 81       	ldd	r25, Y+2	; 0x02
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <LCD_init+0x1f0>
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1422:	88 e3       	ldi	r24, 0x38	; 56
    1424:	0e 94 23 0a 	call	0x1446	; 0x1446 <LCD_sendCommand>

#endif

	/* cursor off */
	LCD_sendCommand(LCD_CURSOR_OFF);
    1428:	8c e0       	ldi	r24, 0x0C	; 12
    142a:	0e 94 23 0a 	call	0x1446	; 0x1446 <LCD_sendCommand>
	/* clear LCD at the beginning */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	0e 94 23 0a 	call	0x1446	; 0x1446 <LCD_sendCommand>
}
    1434:	6c 96       	adiw	r28, 0x1c	; 28
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <LCD_sendCommand>:

/*
 * Description: send required commands to the LCD
 */
void LCD_sendCommand (uint8 command)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	e9 97       	sbiw	r28, 0x39	; 57
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	89 af       	std	Y+57, r24	; 0x39
	/*Clear RS pin (to write command)*/
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    145c:	83 e0       	ldi	r24, 0x03	; 3
    145e:	64 e0       	ldi	r22, 0x04	; 4
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_writePin>
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a0 e8       	ldi	r26, 0x80	; 128
    146c:	bf e3       	ldi	r27, 0x3F	; 63
    146e:	8d ab       	std	Y+53, r24	; 0x35
    1470:	9e ab       	std	Y+54, r25	; 0x36
    1472:	af ab       	std	Y+55, r26	; 0x37
    1474:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1476:	6d a9       	ldd	r22, Y+53	; 0x35
    1478:	7e a9       	ldd	r23, Y+54	; 0x36
    147a:	8f a9       	ldd	r24, Y+55	; 0x37
    147c:	98 ad       	ldd	r25, Y+56	; 0x38
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	4a e7       	ldi	r20, 0x7A	; 122
    1484:	53 e4       	ldi	r21, 0x43	; 67
    1486:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	89 ab       	std	Y+49, r24	; 0x31
    1490:	9a ab       	std	Y+50, r25	; 0x32
    1492:	ab ab       	std	Y+51, r26	; 0x33
    1494:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1496:	69 a9       	ldd	r22, Y+49	; 0x31
    1498:	7a a9       	ldd	r23, Y+50	; 0x32
    149a:	8b a9       	ldd	r24, Y+51	; 0x33
    149c:	9c a9       	ldd	r25, Y+52	; 0x34
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e8       	ldi	r20, 0x80	; 128
    14a4:	5f e3       	ldi	r21, 0x3F	; 63
    14a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14aa:	88 23       	and	r24, r24
    14ac:	2c f4       	brge	.+10     	; 0x14b8 <LCD_sendCommand+0x72>
		__ticks = 1;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	98 ab       	std	Y+48, r25	; 0x30
    14b4:	8f a7       	std	Y+47, r24	; 0x2f
    14b6:	3f c0       	rjmp	.+126    	; 0x1536 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    14b8:	69 a9       	ldd	r22, Y+49	; 0x31
    14ba:	7a a9       	ldd	r23, Y+50	; 0x32
    14bc:	8b a9       	ldd	r24, Y+51	; 0x33
    14be:	9c a9       	ldd	r25, Y+52	; 0x34
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	3f ef       	ldi	r19, 0xFF	; 255
    14c4:	4f e7       	ldi	r20, 0x7F	; 127
    14c6:	57 e4       	ldi	r21, 0x47	; 71
    14c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14cc:	18 16       	cp	r1, r24
    14ce:	4c f5       	brge	.+82     	; 0x1522 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d0:	6d a9       	ldd	r22, Y+53	; 0x35
    14d2:	7e a9       	ldd	r23, Y+54	; 0x36
    14d4:	8f a9       	ldd	r24, Y+55	; 0x37
    14d6:	98 ad       	ldd	r25, Y+56	; 0x38
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e2       	ldi	r20, 0x20	; 32
    14de:	51 e4       	ldi	r21, 0x41	; 65
    14e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	98 ab       	std	Y+48, r25	; 0x30
    14f6:	8f a7       	std	Y+47, r24	; 0x2f
    14f8:	0f c0       	rjmp	.+30     	; 0x1518 <LCD_sendCommand+0xd2>
    14fa:	89 e1       	ldi	r24, 0x19	; 25
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9e a7       	std	Y+46, r25	; 0x2e
    1500:	8d a7       	std	Y+45, r24	; 0x2d
    1502:	8d a5       	ldd	r24, Y+45	; 0x2d
    1504:	9e a5       	ldd	r25, Y+46	; 0x2e
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <LCD_sendCommand+0xc0>
    150a:	9e a7       	std	Y+46, r25	; 0x2e
    150c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1510:	98 a9       	ldd	r25, Y+48	; 0x30
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	98 ab       	std	Y+48, r25	; 0x30
    1516:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1518:	8f a5       	ldd	r24, Y+47	; 0x2f
    151a:	98 a9       	ldd	r25, Y+48	; 0x30
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	69 f7       	brne	.-38     	; 0x14fa <LCD_sendCommand+0xb4>
    1520:	14 c0       	rjmp	.+40     	; 0x154a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1522:	69 a9       	ldd	r22, Y+49	; 0x31
    1524:	7a a9       	ldd	r23, Y+50	; 0x32
    1526:	8b a9       	ldd	r24, Y+51	; 0x33
    1528:	9c a9       	ldd	r25, Y+52	; 0x34
    152a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	98 ab       	std	Y+48, r25	; 0x30
    1534:	8f a7       	std	Y+47, r24	; 0x2f
    1536:	8f a5       	ldd	r24, Y+47	; 0x2f
    1538:	98 a9       	ldd	r25, Y+48	; 0x30
    153a:	9c a7       	std	Y+44, r25	; 0x2c
    153c:	8b a7       	std	Y+43, r24	; 0x2b
    153e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1540:	9c a5       	ldd	r25, Y+44	; 0x2c
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_sendCommand+0xfc>
    1546:	9c a7       	std	Y+44, r25	; 0x2c
    1548:	8b a7       	std	Y+43, r24	; 0x2b
	/* delay for processing Tas = 50ns */
	_delay_ms(1);
	/* Enable LCD E=1 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    154a:	83 e0       	ldi	r24, 0x03	; 3
    154c:	65 e0       	ldi	r22, 0x05	; 5
    154e:	41 e0       	ldi	r20, 0x01	; 1
    1550:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_writePin>
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	a0 e8       	ldi	r26, 0x80	; 128
    155a:	bf e3       	ldi	r27, 0x3F	; 63
    155c:	8f a3       	std	Y+39, r24	; 0x27
    155e:	98 a7       	std	Y+40, r25	; 0x28
    1560:	a9 a7       	std	Y+41, r26	; 0x29
    1562:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1564:	6f a1       	ldd	r22, Y+39	; 0x27
    1566:	78 a5       	ldd	r23, Y+40	; 0x28
    1568:	89 a5       	ldd	r24, Y+41	; 0x29
    156a:	9a a5       	ldd	r25, Y+42	; 0x2a
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	4a e7       	ldi	r20, 0x7A	; 122
    1572:	53 e4       	ldi	r21, 0x43	; 67
    1574:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	8b a3       	std	Y+35, r24	; 0x23
    157e:	9c a3       	std	Y+36, r25	; 0x24
    1580:	ad a3       	std	Y+37, r26	; 0x25
    1582:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1584:	6b a1       	ldd	r22, Y+35	; 0x23
    1586:	7c a1       	ldd	r23, Y+36	; 0x24
    1588:	8d a1       	ldd	r24, Y+37	; 0x25
    158a:	9e a1       	ldd	r25, Y+38	; 0x26
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e8       	ldi	r20, 0x80	; 128
    1592:	5f e3       	ldi	r21, 0x3F	; 63
    1594:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1598:	88 23       	and	r24, r24
    159a:	2c f4       	brge	.+10     	; 0x15a6 <LCD_sendCommand+0x160>
		__ticks = 1;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	9a a3       	std	Y+34, r25	; 0x22
    15a2:	89 a3       	std	Y+33, r24	; 0x21
    15a4:	3f c0       	rjmp	.+126    	; 0x1624 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    15a6:	6b a1       	ldd	r22, Y+35	; 0x23
    15a8:	7c a1       	ldd	r23, Y+36	; 0x24
    15aa:	8d a1       	ldd	r24, Y+37	; 0x25
    15ac:	9e a1       	ldd	r25, Y+38	; 0x26
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	3f ef       	ldi	r19, 0xFF	; 255
    15b2:	4f e7       	ldi	r20, 0x7F	; 127
    15b4:	57 e4       	ldi	r21, 0x47	; 71
    15b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15ba:	18 16       	cp	r1, r24
    15bc:	4c f5       	brge	.+82     	; 0x1610 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15be:	6f a1       	ldd	r22, Y+39	; 0x27
    15c0:	78 a5       	ldd	r23, Y+40	; 0x28
    15c2:	89 a5       	ldd	r24, Y+41	; 0x29
    15c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e2       	ldi	r20, 0x20	; 32
    15cc:	51 e4       	ldi	r21, 0x41	; 65
    15ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	bc 01       	movw	r22, r24
    15d8:	cd 01       	movw	r24, r26
    15da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	9a a3       	std	Y+34, r25	; 0x22
    15e4:	89 a3       	std	Y+33, r24	; 0x21
    15e6:	0f c0       	rjmp	.+30     	; 0x1606 <LCD_sendCommand+0x1c0>
    15e8:	89 e1       	ldi	r24, 0x19	; 25
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	98 a3       	std	Y+32, r25	; 0x20
    15ee:	8f 8f       	std	Y+31, r24	; 0x1f
    15f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15f2:	98 a1       	ldd	r25, Y+32	; 0x20
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <LCD_sendCommand+0x1ae>
    15f8:	98 a3       	std	Y+32, r25	; 0x20
    15fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fc:	89 a1       	ldd	r24, Y+33	; 0x21
    15fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	9a a3       	std	Y+34, r25	; 0x22
    1604:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1606:	89 a1       	ldd	r24, Y+33	; 0x21
    1608:	9a a1       	ldd	r25, Y+34	; 0x22
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	69 f7       	brne	.-38     	; 0x15e8 <LCD_sendCommand+0x1a2>
    160e:	14 c0       	rjmp	.+40     	; 0x1638 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1610:	6b a1       	ldd	r22, Y+35	; 0x23
    1612:	7c a1       	ldd	r23, Y+36	; 0x24
    1614:	8d a1       	ldd	r24, Y+37	; 0x25
    1616:	9e a1       	ldd	r25, Y+38	; 0x26
    1618:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9a a3       	std	Y+34, r25	; 0x22
    1622:	89 a3       	std	Y+33, r24	; 0x21
    1624:	89 a1       	ldd	r24, Y+33	; 0x21
    1626:	9a a1       	ldd	r25, Y+34	; 0x22
    1628:	9e 8f       	std	Y+30, r25	; 0x1e
    162a:	8d 8f       	std	Y+29, r24	; 0x1d
    162c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    162e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <LCD_sendCommand+0x1ea>
    1634:	9e 8f       	std	Y+30, r25	; 0x1e
    1636:	8d 8f       	std	Y+29, r24	; 0x1d
	/* delay for processing Th = 13ns */
	_delay_ms(1);

#elif (LCD_DATA_BITS_MODE == 8)
	/*Send the command directly*/
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	69 ad       	ldd	r22, Y+57	; 0x39
    163c:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePort>
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a0 e8       	ldi	r26, 0x80	; 128
    1646:	bf e3       	ldi	r27, 0x3F	; 63
    1648:	89 8f       	std	Y+25, r24	; 0x19
    164a:	9a 8f       	std	Y+26, r25	; 0x1a
    164c:	ab 8f       	std	Y+27, r26	; 0x1b
    164e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1650:	69 8d       	ldd	r22, Y+25	; 0x19
    1652:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	4a e7       	ldi	r20, 0x7A	; 122
    165e:	53 e4       	ldi	r21, 0x43	; 67
    1660:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	8d 8b       	std	Y+21, r24	; 0x15
    166a:	9e 8b       	std	Y+22, r25	; 0x16
    166c:	af 8b       	std	Y+23, r26	; 0x17
    166e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1670:	6d 89       	ldd	r22, Y+21	; 0x15
    1672:	7e 89       	ldd	r23, Y+22	; 0x16
    1674:	8f 89       	ldd	r24, Y+23	; 0x17
    1676:	98 8d       	ldd	r25, Y+24	; 0x18
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e8       	ldi	r20, 0x80	; 128
    167e:	5f e3       	ldi	r21, 0x3F	; 63
    1680:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1684:	88 23       	and	r24, r24
    1686:	2c f4       	brge	.+10     	; 0x1692 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9c 8b       	std	Y+20, r25	; 0x14
    168e:	8b 8b       	std	Y+19, r24	; 0x13
    1690:	3f c0       	rjmp	.+126    	; 0x1710 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1692:	6d 89       	ldd	r22, Y+21	; 0x15
    1694:	7e 89       	ldd	r23, Y+22	; 0x16
    1696:	8f 89       	ldd	r24, Y+23	; 0x17
    1698:	98 8d       	ldd	r25, Y+24	; 0x18
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	3f ef       	ldi	r19, 0xFF	; 255
    169e:	4f e7       	ldi	r20, 0x7F	; 127
    16a0:	57 e4       	ldi	r21, 0x47	; 71
    16a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16a6:	18 16       	cp	r1, r24
    16a8:	4c f5       	brge	.+82     	; 0x16fc <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16aa:	69 8d       	ldd	r22, Y+25	; 0x19
    16ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e2       	ldi	r20, 0x20	; 32
    16b8:	51 e4       	ldi	r21, 0x41	; 65
    16ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	9c 8b       	std	Y+20, r25	; 0x14
    16d0:	8b 8b       	std	Y+19, r24	; 0x13
    16d2:	0f c0       	rjmp	.+30     	; 0x16f2 <LCD_sendCommand+0x2ac>
    16d4:	89 e1       	ldi	r24, 0x19	; 25
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9a 8b       	std	Y+18, r25	; 0x12
    16da:	89 8b       	std	Y+17, r24	; 0x11
    16dc:	89 89       	ldd	r24, Y+17	; 0x11
    16de:	9a 89       	ldd	r25, Y+18	; 0x12
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <LCD_sendCommand+0x29a>
    16e4:	9a 8b       	std	Y+18, r25	; 0x12
    16e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e8:	8b 89       	ldd	r24, Y+19	; 0x13
    16ea:	9c 89       	ldd	r25, Y+20	; 0x14
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	9c 8b       	std	Y+20, r25	; 0x14
    16f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f2:	8b 89       	ldd	r24, Y+19	; 0x13
    16f4:	9c 89       	ldd	r25, Y+20	; 0x14
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	69 f7       	brne	.-38     	; 0x16d4 <LCD_sendCommand+0x28e>
    16fa:	14 c0       	rjmp	.+40     	; 0x1724 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fc:	6d 89       	ldd	r22, Y+21	; 0x15
    16fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1700:	8f 89       	ldd	r24, Y+23	; 0x17
    1702:	98 8d       	ldd	r25, Y+24	; 0x18
    1704:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	9c 8b       	std	Y+20, r25	; 0x14
    170e:	8b 8b       	std	Y+19, r24	; 0x13
    1710:	8b 89       	ldd	r24, Y+19	; 0x13
    1712:	9c 89       	ldd	r25, Y+20	; 0x14
    1714:	98 8b       	std	Y+16, r25	; 0x10
    1716:	8f 87       	std	Y+15, r24	; 0x0f
    1718:	8f 85       	ldd	r24, Y+15	; 0x0f
    171a:	98 89       	ldd	r25, Y+16	; 0x10
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <LCD_sendCommand+0x2d6>
    1720:	98 8b       	std	Y+16, r25	; 0x10
    1722:	8f 87       	std	Y+15, r24	; 0x0f
	/* delay for processing Tdsw = 100ns */
	_delay_ms(1);
	/* Disable LCD E=0 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1724:	83 e0       	ldi	r24, 0x03	; 3
    1726:	65 e0       	ldi	r22, 0x05	; 5
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_writePin>
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a0 e8       	ldi	r26, 0x80	; 128
    1734:	bf e3       	ldi	r27, 0x3F	; 63
    1736:	8b 87       	std	Y+11, r24	; 0x0b
    1738:	9c 87       	std	Y+12, r25	; 0x0c
    173a:	ad 87       	std	Y+13, r26	; 0x0d
    173c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1740:	7c 85       	ldd	r23, Y+12	; 0x0c
    1742:	8d 85       	ldd	r24, Y+13	; 0x0d
    1744:	9e 85       	ldd	r25, Y+14	; 0x0e
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	4a e7       	ldi	r20, 0x7A	; 122
    174c:	53 e4       	ldi	r21, 0x43	; 67
    174e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	8f 83       	std	Y+7, r24	; 0x07
    1758:	98 87       	std	Y+8, r25	; 0x08
    175a:	a9 87       	std	Y+9, r26	; 0x09
    175c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    175e:	6f 81       	ldd	r22, Y+7	; 0x07
    1760:	78 85       	ldd	r23, Y+8	; 0x08
    1762:	89 85       	ldd	r24, Y+9	; 0x09
    1764:	9a 85       	ldd	r25, Y+10	; 0x0a
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e8       	ldi	r20, 0x80	; 128
    176c:	5f e3       	ldi	r21, 0x3F	; 63
    176e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1772:	88 23       	and	r24, r24
    1774:	2c f4       	brge	.+10     	; 0x1780 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9e 83       	std	Y+6, r25	; 0x06
    177c:	8d 83       	std	Y+5, r24	; 0x05
    177e:	3f c0       	rjmp	.+126    	; 0x17fe <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1780:	6f 81       	ldd	r22, Y+7	; 0x07
    1782:	78 85       	ldd	r23, Y+8	; 0x08
    1784:	89 85       	ldd	r24, Y+9	; 0x09
    1786:	9a 85       	ldd	r25, Y+10	; 0x0a
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	3f ef       	ldi	r19, 0xFF	; 255
    178c:	4f e7       	ldi	r20, 0x7F	; 127
    178e:	57 e4       	ldi	r21, 0x47	; 71
    1790:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1794:	18 16       	cp	r1, r24
    1796:	4c f5       	brge	.+82     	; 0x17ea <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1798:	6b 85       	ldd	r22, Y+11	; 0x0b
    179a:	7c 85       	ldd	r23, Y+12	; 0x0c
    179c:	8d 85       	ldd	r24, Y+13	; 0x0d
    179e:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e2       	ldi	r20, 0x20	; 32
    17a6:	51 e4       	ldi	r21, 0x41	; 65
    17a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9e 83       	std	Y+6, r25	; 0x06
    17be:	8d 83       	std	Y+5, r24	; 0x05
    17c0:	0f c0       	rjmp	.+30     	; 0x17e0 <LCD_sendCommand+0x39a>
    17c2:	89 e1       	ldi	r24, 0x19	; 25
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9c 83       	std	Y+4, r25	; 0x04
    17c8:	8b 83       	std	Y+3, r24	; 0x03
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <LCD_sendCommand+0x388>
    17d2:	9c 83       	std	Y+4, r25	; 0x04
    17d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	9e 83       	std	Y+6, r25	; 0x06
    17de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	9e 81       	ldd	r25, Y+6	; 0x06
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	69 f7       	brne	.-38     	; 0x17c2 <LCD_sendCommand+0x37c>
    17e8:	14 c0       	rjmp	.+40     	; 0x1812 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ea:	6f 81       	ldd	r22, Y+7	; 0x07
    17ec:	78 85       	ldd	r23, Y+8	; 0x08
    17ee:	89 85       	ldd	r24, Y+9	; 0x09
    17f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	8d 83       	std	Y+5, r24	; 0x05
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	9e 81       	ldd	r25, Y+6	; 0x06
    1802:	9a 83       	std	Y+2, r25	; 0x02
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	9a 81       	ldd	r25, Y+2	; 0x02
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <LCD_sendCommand+0x3c4>
    180e:	9a 83       	std	Y+2, r25	; 0x02
    1810:	89 83       	std	Y+1, r24	; 0x01
	/* delay for processing Th = 13ns */
	_delay_ms(1);

#endif

}
    1812:	e9 96       	adiw	r28, 0x39	; 57
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <LCD_displayCharacter>:
/*
 * Description:
 * display specific characters to the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	e9 97       	sbiw	r28, 0x39	; 57
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	89 af       	std	Y+57, r24	; 0x39
	/*Set RS pin (to write data)*/
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	64 e0       	ldi	r22, 0x04	; 4
    183e:	41 e0       	ldi	r20, 0x01	; 1
    1840:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_writePin>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a0 e8       	ldi	r26, 0x80	; 128
    184a:	bf e3       	ldi	r27, 0x3F	; 63
    184c:	8d ab       	std	Y+53, r24	; 0x35
    184e:	9e ab       	std	Y+54, r25	; 0x36
    1850:	af ab       	std	Y+55, r26	; 0x37
    1852:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	6d a9       	ldd	r22, Y+53	; 0x35
    1856:	7e a9       	ldd	r23, Y+54	; 0x36
    1858:	8f a9       	ldd	r24, Y+55	; 0x37
    185a:	98 ad       	ldd	r25, Y+56	; 0x38
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4a e7       	ldi	r20, 0x7A	; 122
    1862:	53 e4       	ldi	r21, 0x43	; 67
    1864:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	89 ab       	std	Y+49, r24	; 0x31
    186e:	9a ab       	std	Y+50, r25	; 0x32
    1870:	ab ab       	std	Y+51, r26	; 0x33
    1872:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1874:	69 a9       	ldd	r22, Y+49	; 0x31
    1876:	7a a9       	ldd	r23, Y+50	; 0x32
    1878:	8b a9       	ldd	r24, Y+51	; 0x33
    187a:	9c a9       	ldd	r25, Y+52	; 0x34
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <LCD_displayCharacter+0x72>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	98 ab       	std	Y+48, r25	; 0x30
    1892:	8f a7       	std	Y+47, r24	; 0x2f
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1896:	69 a9       	ldd	r22, Y+49	; 0x31
    1898:	7a a9       	ldd	r23, Y+50	; 0x32
    189a:	8b a9       	ldd	r24, Y+51	; 0x33
    189c:	9c a9       	ldd	r25, Y+52	; 0x34
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	4c f5       	brge	.+82     	; 0x1900 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	6d a9       	ldd	r22, Y+53	; 0x35
    18b0:	7e a9       	ldd	r23, Y+54	; 0x36
    18b2:	8f a9       	ldd	r24, Y+55	; 0x37
    18b4:	98 ad       	ldd	r25, Y+56	; 0x38
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	51 e4       	ldi	r21, 0x41	; 65
    18be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	98 ab       	std	Y+48, r25	; 0x30
    18d4:	8f a7       	std	Y+47, r24	; 0x2f
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <LCD_displayCharacter+0xd2>
    18d8:	89 e1       	ldi	r24, 0x19	; 25
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9e a7       	std	Y+46, r25	; 0x2e
    18de:	8d a7       	std	Y+45, r24	; 0x2d
    18e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    18e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_displayCharacter+0xc0>
    18e8:	9e a7       	std	Y+46, r25	; 0x2e
    18ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ee:	98 a9       	ldd	r25, Y+48	; 0x30
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	98 ab       	std	Y+48, r25	; 0x30
    18f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f8:	98 a9       	ldd	r25, Y+48	; 0x30
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	69 f7       	brne	.-38     	; 0x18d8 <LCD_displayCharacter+0xb4>
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	69 a9       	ldd	r22, Y+49	; 0x31
    1902:	7a a9       	ldd	r23, Y+50	; 0x32
    1904:	8b a9       	ldd	r24, Y+51	; 0x33
    1906:	9c a9       	ldd	r25, Y+52	; 0x34
    1908:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	98 ab       	std	Y+48, r25	; 0x30
    1912:	8f a7       	std	Y+47, r24	; 0x2f
    1914:	8f a5       	ldd	r24, Y+47	; 0x2f
    1916:	98 a9       	ldd	r25, Y+48	; 0x30
    1918:	9c a7       	std	Y+44, r25	; 0x2c
    191a:	8b a7       	std	Y+43, r24	; 0x2b
    191c:	8b a5       	ldd	r24, Y+43	; 0x2b
    191e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_displayCharacter+0xfc>
    1924:	9c a7       	std	Y+44, r25	; 0x2c
    1926:	8b a7       	std	Y+43, r24	; 0x2b
	/* delay for processing Tas = 50ns */
	_delay_ms(1);
	/* Enable LCD E=1 */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	65 e0       	ldi	r22, 0x05	; 5
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_writePin>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e8       	ldi	r26, 0x80	; 128
    1938:	bf e3       	ldi	r27, 0x3F	; 63
    193a:	8f a3       	std	Y+39, r24	; 0x27
    193c:	98 a7       	std	Y+40, r25	; 0x28
    193e:	a9 a7       	std	Y+41, r26	; 0x29
    1940:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1942:	6f a1       	ldd	r22, Y+39	; 0x27
    1944:	78 a5       	ldd	r23, Y+40	; 0x28
    1946:	89 a5       	ldd	r24, Y+41	; 0x29
    1948:	9a a5       	ldd	r25, Y+42	; 0x2a
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	4a e7       	ldi	r20, 0x7A	; 122
    1950:	53 e4       	ldi	r21, 0x43	; 67
    1952:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	8b a3       	std	Y+35, r24	; 0x23
    195c:	9c a3       	std	Y+36, r25	; 0x24
    195e:	ad a3       	std	Y+37, r26	; 0x25
    1960:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1962:	6b a1       	ldd	r22, Y+35	; 0x23
    1964:	7c a1       	ldd	r23, Y+36	; 0x24
    1966:	8d a1       	ldd	r24, Y+37	; 0x25
    1968:	9e a1       	ldd	r25, Y+38	; 0x26
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e8       	ldi	r20, 0x80	; 128
    1970:	5f e3       	ldi	r21, 0x3F	; 63
    1972:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1976:	88 23       	and	r24, r24
    1978:	2c f4       	brge	.+10     	; 0x1984 <LCD_displayCharacter+0x160>
		__ticks = 1;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9a a3       	std	Y+34, r25	; 0x22
    1980:	89 a3       	std	Y+33, r24	; 0x21
    1982:	3f c0       	rjmp	.+126    	; 0x1a02 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1984:	6b a1       	ldd	r22, Y+35	; 0x23
    1986:	7c a1       	ldd	r23, Y+36	; 0x24
    1988:	8d a1       	ldd	r24, Y+37	; 0x25
    198a:	9e a1       	ldd	r25, Y+38	; 0x26
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	3f ef       	ldi	r19, 0xFF	; 255
    1990:	4f e7       	ldi	r20, 0x7F	; 127
    1992:	57 e4       	ldi	r21, 0x47	; 71
    1994:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1998:	18 16       	cp	r1, r24
    199a:	4c f5       	brge	.+82     	; 0x19ee <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199c:	6f a1       	ldd	r22, Y+39	; 0x27
    199e:	78 a5       	ldd	r23, Y+40	; 0x28
    19a0:	89 a5       	ldd	r24, Y+41	; 0x29
    19a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e2       	ldi	r20, 0x20	; 32
    19aa:	51 e4       	ldi	r21, 0x41	; 65
    19ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	bc 01       	movw	r22, r24
    19b6:	cd 01       	movw	r24, r26
    19b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9a a3       	std	Y+34, r25	; 0x22
    19c2:	89 a3       	std	Y+33, r24	; 0x21
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <LCD_displayCharacter+0x1c0>
    19c6:	89 e1       	ldi	r24, 0x19	; 25
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	98 a3       	std	Y+32, r25	; 0x20
    19cc:	8f 8f       	std	Y+31, r24	; 0x1f
    19ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19d0:	98 a1       	ldd	r25, Y+32	; 0x20
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <LCD_displayCharacter+0x1ae>
    19d6:	98 a3       	std	Y+32, r25	; 0x20
    19d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19da:	89 a1       	ldd	r24, Y+33	; 0x21
    19dc:	9a a1       	ldd	r25, Y+34	; 0x22
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	9a a3       	std	Y+34, r25	; 0x22
    19e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e4:	89 a1       	ldd	r24, Y+33	; 0x21
    19e6:	9a a1       	ldd	r25, Y+34	; 0x22
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	69 f7       	brne	.-38     	; 0x19c6 <LCD_displayCharacter+0x1a2>
    19ec:	14 c0       	rjmp	.+40     	; 0x1a16 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ee:	6b a1       	ldd	r22, Y+35	; 0x23
    19f0:	7c a1       	ldd	r23, Y+36	; 0x24
    19f2:	8d a1       	ldd	r24, Y+37	; 0x25
    19f4:	9e a1       	ldd	r25, Y+38	; 0x26
    19f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9a a3       	std	Y+34, r25	; 0x22
    1a00:	89 a3       	std	Y+33, r24	; 0x21
    1a02:	89 a1       	ldd	r24, Y+33	; 0x21
    1a04:	9a a1       	ldd	r25, Y+34	; 0x22
    1a06:	9e 8f       	std	Y+30, r25	; 0x1e
    1a08:	8d 8f       	std	Y+29, r24	; 0x1d
    1a0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <LCD_displayCharacter+0x1ea>
    1a12:	9e 8f       	std	Y+30, r25	; 0x1e
    1a14:	8d 8f       	std	Y+29, r24	; 0x1d
	/* delay for processing Th = 13ns */
	_delay_ms(1);

#elif (LCD_DATA_BITS_MODE == 8)
	/*Send the command directly*/
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    1a16:	82 e0       	ldi	r24, 0x02	; 2
    1a18:	69 ad       	ldd	r22, Y+57	; 0x39
    1a1a:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePort>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e8       	ldi	r26, 0x80	; 128
    1a24:	bf e3       	ldi	r27, 0x3F	; 63
    1a26:	89 8f       	std	Y+25, r24	; 0x19
    1a28:	9a 8f       	std	Y+26, r25	; 0x1a
    1a2a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	4a e7       	ldi	r20, 0x7A	; 122
    1a3c:	53 e4       	ldi	r21, 0x43	; 67
    1a3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	8d 8b       	std	Y+21, r24	; 0x15
    1a48:	9e 8b       	std	Y+22, r25	; 0x16
    1a4a:	af 8b       	std	Y+23, r26	; 0x17
    1a4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a50:	7e 89       	ldd	r23, Y+22	; 0x16
    1a52:	8f 89       	ldd	r24, Y+23	; 0x17
    1a54:	98 8d       	ldd	r25, Y+24	; 0x18
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9c 8b       	std	Y+20, r25	; 0x14
    1a6c:	8b 8b       	std	Y+19, r24	; 0x13
    1a6e:	3f c0       	rjmp	.+126    	; 0x1aee <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1a70:	6d 89       	ldd	r22, Y+21	; 0x15
    1a72:	7e 89       	ldd	r23, Y+22	; 0x16
    1a74:	8f 89       	ldd	r24, Y+23	; 0x17
    1a76:	98 8d       	ldd	r25, Y+24	; 0x18
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	4f e7       	ldi	r20, 0x7F	; 127
    1a7e:	57 e4       	ldi	r21, 0x47	; 71
    1a80:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a84:	18 16       	cp	r1, r24
    1a86:	4c f5       	brge	.+82     	; 0x1ada <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a88:	69 8d       	ldd	r22, Y+25	; 0x19
    1a8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	cd 01       	movw	r24, r26
    1aa4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9c 8b       	std	Y+20, r25	; 0x14
    1aae:	8b 8b       	std	Y+19, r24	; 0x13
    1ab0:	0f c0       	rjmp	.+30     	; 0x1ad0 <LCD_displayCharacter+0x2ac>
    1ab2:	89 e1       	ldi	r24, 0x19	; 25
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	9a 8b       	std	Y+18, r25	; 0x12
    1ab8:	89 8b       	std	Y+17, r24	; 0x11
    1aba:	89 89       	ldd	r24, Y+17	; 0x11
    1abc:	9a 89       	ldd	r25, Y+18	; 0x12
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_displayCharacter+0x29a>
    1ac2:	9a 8b       	std	Y+18, r25	; 0x12
    1ac4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	9c 8b       	std	Y+20, r25	; 0x14
    1ace:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	69 f7       	brne	.-38     	; 0x1ab2 <LCD_displayCharacter+0x28e>
    1ad8:	14 c0       	rjmp	.+40     	; 0x1b02 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ada:	6d 89       	ldd	r22, Y+21	; 0x15
    1adc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ade:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9c 8b       	std	Y+20, r25	; 0x14
    1aec:	8b 8b       	std	Y+19, r24	; 0x13
    1aee:	8b 89       	ldd	r24, Y+19	; 0x13
    1af0:	9c 89       	ldd	r25, Y+20	; 0x14
    1af2:	98 8b       	std	Y+16, r25	; 0x10
    1af4:	8f 87       	std	Y+15, r24	; 0x0f
    1af6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af8:	98 89       	ldd	r25, Y+16	; 0x10
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <LCD_displayCharacter+0x2d6>
    1afe:	98 8b       	std	Y+16, r25	; 0x10
    1b00:	8f 87       	std	Y+15, r24	; 0x0f
	/* delay for processing Tdsw = 100ns */
	_delay_ms(1);
	/* Disable LCD E=0 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1b02:	83 e0       	ldi	r24, 0x03	; 3
    1b04:	65 e0       	ldi	r22, 0x05	; 5
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_writePin>
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	a0 e8       	ldi	r26, 0x80	; 128
    1b12:	bf e3       	ldi	r27, 0x3F	; 63
    1b14:	8b 87       	std	Y+11, r24	; 0x0b
    1b16:	9c 87       	std	Y+12, r25	; 0x0c
    1b18:	ad 87       	std	Y+13, r26	; 0x0d
    1b1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	4a e7       	ldi	r20, 0x7A	; 122
    1b2a:	53 e4       	ldi	r21, 0x43	; 67
    1b2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	8f 83       	std	Y+7, r24	; 0x07
    1b36:	98 87       	std	Y+8, r25	; 0x08
    1b38:	a9 87       	std	Y+9, r26	; 0x09
    1b3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3e:	78 85       	ldd	r23, Y+8	; 0x08
    1b40:	89 85       	ldd	r24, Y+9	; 0x09
    1b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e8       	ldi	r20, 0x80	; 128
    1b4a:	5f e3       	ldi	r21, 0x3F	; 63
    1b4c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b50:	88 23       	and	r24, r24
    1b52:	2c f4       	brge	.+10     	; 0x1b5e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	3f c0       	rjmp	.+126    	; 0x1bdc <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b60:	78 85       	ldd	r23, Y+8	; 0x08
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
    1b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	3f ef       	ldi	r19, 0xFF	; 255
    1b6a:	4f e7       	ldi	r20, 0x7F	; 127
    1b6c:	57 e4       	ldi	r21, 0x47	; 71
    1b6e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b72:	18 16       	cp	r1, r24
    1b74:	4c f5       	brge	.+82     	; 0x1bc8 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e2       	ldi	r20, 0x20	; 32
    1b84:	51 e4       	ldi	r21, 0x41	; 65
    1b86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	0f c0       	rjmp	.+30     	; 0x1bbe <LCD_displayCharacter+0x39a>
    1ba0:	89 e1       	ldi	r24, 0x19	; 25
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9c 83       	std	Y+4, r25	; 0x04
    1ba6:	8b 83       	std	Y+3, r24	; 0x03
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_displayCharacter+0x388>
    1bb0:	9c 83       	std	Y+4, r25	; 0x04
    1bb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	69 f7       	brne	.-38     	; 0x1ba0 <LCD_displayCharacter+0x37c>
    1bc6:	14 c0       	rjmp	.+40     	; 0x1bf0 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bca:	78 85       	ldd	r23, Y+8	; 0x08
    1bcc:	89 85       	ldd	r24, Y+9	; 0x09
    1bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9e 83       	std	Y+6, r25	; 0x06
    1bda:	8d 83       	std	Y+5, r24	; 0x05
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bde:	9e 81       	ldd	r25, Y+6	; 0x06
    1be0:	9a 83       	std	Y+2, r25	; 0x02
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_displayCharacter+0x3c4>
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
	/* delay for processing Th = 13ns */
	_delay_ms(1);

#endif

}
    1bf0:	e9 96       	adiw	r28, 0x39	; 57
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <LCD_displayString>:
 * Description:
 * Display string to the screen
 *
 */
void LCD_displayString(const uint8 *Str)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <LCD_displayString+0x6>
    1c08:	0f 92       	push	r0
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	9b 83       	std	Y+3, r25	; 0x03
    1c10:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    1c12:	19 82       	std	Y+1, r1	; 0x01
    1c14:	0e c0       	rjmp	.+28     	; 0x1c32 <LCD_displayString+0x30>

	while (Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c20:	fc 01       	movw	r30, r24
    1c22:	e2 0f       	add	r30, r18
    1c24:	f3 1f       	adc	r31, r19
    1c26:	80 81       	ld	r24, Z
    1c28:	0e 94 12 0c 	call	0x1824	; 0x1824 <LCD_displayCharacter>
		i++;
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	8f 5f       	subi	r24, 0xFF	; 255
    1c30:	89 83       	std	Y+1, r24	; 0x01
void LCD_displayString(const uint8 *Str)
{

	uint8 i = 0;

	while (Str[i] != '\0')
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	e2 0f       	add	r30, r18
    1c40:	f3 1f       	adc	r31, r19
    1c42:	80 81       	ld	r24, Z
    1c44:	88 23       	and	r24, r24
    1c46:	39 f7       	brne	.-50     	; 0x1c16 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <LCD_moveCursor+0x6>
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <LCD_moveCursor+0x8>
    1c5c:	0f 92       	push	r0
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	8a 83       	std	Y+2, r24	; 0x02
    1c64:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Lcd_memory_address;
	switch(row)
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	3d 83       	std	Y+5, r19	; 0x05
    1c6e:	2c 83       	std	Y+4, r18	; 0x04
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	9d 81       	ldd	r25, Y+5	; 0x05
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	91 05       	cpc	r25, r1
    1c78:	c1 f0       	breq	.+48     	; 0x1caa <LCD_moveCursor+0x56>
    1c7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7e:	22 30       	cpi	r18, 0x02	; 2
    1c80:	31 05       	cpc	r19, r1
    1c82:	2c f4       	brge	.+10     	; 0x1c8e <LCD_moveCursor+0x3a>
    1c84:	8c 81       	ldd	r24, Y+4	; 0x04
    1c86:	9d 81       	ldd	r25, Y+5	; 0x05
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	61 f0       	breq	.+24     	; 0x1ca4 <LCD_moveCursor+0x50>
    1c8c:	19 c0       	rjmp	.+50     	; 0x1cc0 <LCD_moveCursor+0x6c>
    1c8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c90:	3d 81       	ldd	r19, Y+5	; 0x05
    1c92:	22 30       	cpi	r18, 0x02	; 2
    1c94:	31 05       	cpc	r19, r1
    1c96:	69 f0       	breq	.+26     	; 0x1cb2 <LCD_moveCursor+0x5e>
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9c:	83 30       	cpi	r24, 0x03	; 3
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	61 f0       	breq	.+24     	; 0x1cba <LCD_moveCursor+0x66>
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <LCD_moveCursor+0x6c>
	{
	case 0:
		Lcd_memory_address = col;
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	0b c0       	rjmp	.+22     	; 0x1cc0 <LCD_moveCursor+0x6c>
		break;
	case 1:
		Lcd_memory_address = col + 0x40;
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	80 5c       	subi	r24, 0xC0	; 192
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	07 c0       	rjmp	.+14     	; 0x1cc0 <LCD_moveCursor+0x6c>
		break;
	case 2:
		Lcd_memory_address = col + 0x10;
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	80 5f       	subi	r24, 0xF0	; 240
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	03 c0       	rjmp	.+6      	; 0x1cc0 <LCD_moveCursor+0x6c>
		break;
	case 3:
		Lcd_memory_address = col + 0x50;
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	80 5b       	subi	r24, 0xB0	; 176
    1cbe:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand( Lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	80 68       	ori	r24, 0x80	; 128
    1cc4:	0e 94 23 0a 	call	0x1446	; 0x1446 <LCD_sendCommand>

}
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	00 d0       	rcall	.+0      	; 0x1cde <LCD_displayStringRowColumn+0x6>
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <LCD_displayStringRowColumn+0x8>
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	6a 83       	std	Y+2, r22	; 0x02
    1ce8:	5c 83       	std	Y+4, r21	; 0x04
    1cea:	4b 83       	std	Y+3, r20	; 0x03

	LCD_moveCursor(row,col);
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	6a 81       	ldd	r22, Y+2	; 0x02
    1cf0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <LCD_moveCursor>
	LCD_displayString(Str);
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <LCD_displayString>

}
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	62 97       	sbiw	r28, 0x12	; 18
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	9a 8b       	std	Y+18, r25	; 0x12
    1d20:	89 8b       	std	Y+17, r24	; 0x11
	/* String to hold the ascii result */
	char buff[16];
	/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
	itoa(data,buff,10);
    1d22:	89 89       	ldd	r24, Y+17	; 0x11
    1d24:	9a 89       	ldd	r25, Y+18	; 0x12
    1d26:	9e 01       	movw	r18, r28
    1d28:	2f 5f       	subi	r18, 0xFF	; 255
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	b9 01       	movw	r22, r18
    1d2e:	4a e0       	ldi	r20, 0x0A	; 10
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	0e 94 4f 10 	call	0x209e	; 0x209e <itoa>
	/* Display the string */
	LCD_displayString(buff);
    1d36:	ce 01       	movw	r24, r28
    1d38:	01 96       	adiw	r24, 0x01	; 1
    1d3a:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <LCD_displayString>

}
    1d3e:	62 96       	adiw	r28, 0x12	; 18
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
	/* Clear screen */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	0e 94 23 0a 	call	0x1446	; 0x1446 <LCD_sendCommand>

}
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const uart_ConfigType *Config_Ptr){
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <UART_init+0x6>
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <UART_init+0x8>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	9c 83       	std	Y+4, r25	; 0x04
    1d72:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value =0;
    1d74:	1a 82       	std	Y+2, r1	; 0x02
    1d76:	19 82       	std	Y+1, r1	; 0x01

	/* Double Speed or Normal mode*/
#ifdef ASYNCHRONOUS_DOUBLE_SPEED_MODE
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1d78:	eb e2       	ldi	r30, 0x2B	; 43
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	80 83       	st	Z, r24
	 * UDRIE Disable/Enable USART Data Register Empty Interrupt Enable
	 ***********************************************************************/

#if (UART_TRANSMIT_IMPLEMENTATION_BASED == UART_POOLLING_BASED)

	CLEAR_BIT(UCSRB,TXCIE);
    1d80:	aa e2       	ldi	r26, 0x2A	; 42
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	ea e2       	ldi	r30, 0x2A	; 42
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	8f 7b       	andi	r24, 0xBF	; 191
    1d8c:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB,UDRIE);
    1d8e:	aa e2       	ldi	r26, 0x2A	; 42
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	ea e2       	ldi	r30, 0x2A	; 42
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	8f 7d       	andi	r24, 0xDF	; 223
    1d9a:	8c 93       	st	X, r24

#endif

#if (UART_RECEIVE_IMPLEMENTATION_BASED == UART_POOLLING_BASED)

	CLEAR_BIT(UCSRB,RXCIE);
    1d9c:	aa e2       	ldi	r26, 0x2A	; 42
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	ea e2       	ldi	r30, 0x2A	; 42
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	8f 77       	andi	r24, 0x7F	; 127
    1da8:	8c 93       	st	X, r24
	/*
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 */
	SET_BIT(UCSRB,RXEN);
    1daa:	aa e2       	ldi	r26, 0x2A	; 42
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	ea e2       	ldi	r30, 0x2A	; 42
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	80 61       	ori	r24, 0x10	; 16
    1db6:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    1db8:	aa e2       	ldi	r26, 0x2A	; 42
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	ea e2       	ldi	r30, 0x2A	; 42
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	88 60       	ori	r24, 0x08	; 8
    1dc4:	8c 93       	st	X, r24

	/* UCSZ2 = 0 For 5,6,7,8-bit data mode in case of 9bit mode
	 * UCSZ2 = 1 */
	CLEAR_BIT(UCSRB,UCSZ2);
    1dc6:	aa e2       	ldi	r26, 0x2A	; 42
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	ea e2       	ldi	r30, 0x2A	; 42
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	8b 7f       	andi	r24, 0xFB	; 251
    1dd2:	8c 93       	st	X, r24

	/************************** UCSRC Description **************************
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	/*URSEL   = 1 The URSEL must be one when writing the UCSRC*/
	SET_BIT(UCSRC,URSEL);
    1dd4:	a0 e4       	ldi	r26, 0x40	; 64
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e0 e4       	ldi	r30, 0x40	; 64
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	80 68       	ori	r24, 0x80	; 128
    1de0:	8c 93       	st	X, r24

	/*Number of bits is configurable
	 * UCSZ1:0 = 11 For 8-bit data mode*/

	UCSRC = (UCSRC & 0xF9)| ((Config_Ptr->num_of_data_bits)<<1);
    1de2:	a0 e4       	ldi	r26, 0x40	; 64
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e0 e4       	ldi	r30, 0x40	; 64
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	28 2f       	mov	r18, r24
    1dee:	29 7f       	andi	r18, 0xF9	; 249
    1df0:	eb 81       	ldd	r30, Y+3	; 0x03
    1df2:	fc 81       	ldd	r31, Y+4	; 0x04
    1df4:	82 81       	ldd	r24, Z+2	; 0x02
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	82 2b       	or	r24, r18
    1e00:	8c 93       	st	X, r24

	/*UMSEL   = 0 Asynchronous Operation*/
#if ( UART_SYNCHRONOUS_ASYNCHRONOUS_MODE == ASYNCHRONOUS_MODE)

	/*if Clock polarity asynchronous that's mean this bit UMSEL=0*/
	CLEAR_BIT(UCSRC,UMSEL);
    1e02:	a0 e4       	ldi	r26, 0x40	; 64
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e0 e4       	ldi	r30, 0x40	; 64
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	8f 7b       	andi	r24, 0xBF	; 191
    1e0e:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UMSEL);

#endif

	/* Parity mode settings UPM1:0  = 00 Disable parity bit */
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->Parity_mode)<<4);
    1e10:	a0 e4       	ldi	r26, 0x40	; 64
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e0 e4       	ldi	r30, 0x40	; 64
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	2f 7c       	andi	r18, 0xCF	; 207
    1e1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e20:	fc 81       	ldd	r31, Y+4	; 0x04
    1e22:	84 81       	ldd	r24, Z+4	; 0x04
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	82 95       	swap	r24
    1e2a:	92 95       	swap	r25
    1e2c:	90 7f       	andi	r25, 0xF0	; 240
    1e2e:	98 27       	eor	r25, r24
    1e30:	80 7f       	andi	r24, 0xF0	; 240
    1e32:	98 27       	eor	r25, r24
    1e34:	82 2b       	or	r24, r18
    1e36:	8c 93       	st	X, r24

	/* Stop bits settings */
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bits)<<3);
    1e38:	a0 e4       	ldi	r26, 0x40	; 64
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e0 e4       	ldi	r30, 0x40	; 64
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	28 2f       	mov	r18, r24
    1e44:	27 7f       	andi	r18, 0xF7	; 247
    1e46:	eb 81       	ldd	r30, Y+3	; 0x03
    1e48:	fc 81       	ldd	r31, Y+4	; 0x04
    1e4a:	83 81       	ldd	r24, Z+3	; 0x03
    1e4c:	88 2f       	mov	r24, r24
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	82 2b       	or	r24, r18
    1e5e:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)( (F_CPU / (( Config_Ptr->Baudrate )* 8UL) ) - 1);
    1e60:	eb 81       	ldd	r30, Y+3	; 0x03
    1e62:	fc 81       	ldd	r31, Y+4	; 0x04
    1e64:	80 81       	ld	r24, Z
    1e66:	91 81       	ldd	r25, Z+1	; 0x01
    1e68:	cc 01       	movw	r24, r24
    1e6a:	a0 e0       	ldi	r26, 0x00	; 0
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	aa 1f       	adc	r26, r26
    1e74:	bb 1f       	adc	r27, r27
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	aa 1f       	adc	r26, r26
    1e7c:	bb 1f       	adc	r27, r27
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	aa 1f       	adc	r26, r26
    1e84:	bb 1f       	adc	r27, r27
    1e86:	9c 01       	movw	r18, r24
    1e88:	ad 01       	movw	r20, r26
    1e8a:	80 e4       	ldi	r24, 0x40	; 64
    1e8c:	92 e4       	ldi	r25, 0x42	; 66
    1e8e:	af e0       	ldi	r26, 0x0F	; 15
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__udivmodsi4>
    1e9a:	da 01       	movw	r26, r20
    1e9c:	c9 01       	movw	r24, r18
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1ea4:	e0 e4       	ldi	r30, 0x40	; 64
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1eac:	89 2f       	mov	r24, r25
    1eae:	99 27       	eor	r25, r25
    1eb0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1eb2:	e9 e2       	ldi	r30, 0x29	; 41
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	80 83       	st	Z, r24

}
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data){
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	0f 92       	push	r0
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	89 83       	std	Y+1, r24	; 0x01
	/* Polling based*/
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1ed4:	eb e2       	ldi	r30, 0x2B	; 43
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	80 72       	andi	r24, 0x20	; 32
    1ee0:	90 70       	andi	r25, 0x00	; 0
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	b9 f3       	breq	.-18     	; 0x1ed4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1ee6:	ec e2       	ldi	r30, 0x2C	; 44
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	80 83       	st	Z, r24
		UDR = data;
		while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
		SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/

}
    1eee:	0f 90       	pop	r0
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <UART_recieveByte>:

}
#else

uint8 UART_recieveByte(void)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1efe:	eb e2       	ldi	r30, 0x2B	; 43
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	88 23       	and	r24, r24
    1f06:	dc f7       	brge	.-10     	; 0x1efe <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    1f08:	ec e2       	ldi	r30, 0x2C	; 44
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
}
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <UART_sendString+0x6>
    1f1a:	0f 92       	push	r0
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	9b 83       	std	Y+3, r25	; 0x03
    1f22:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    1f24:	19 82       	std	Y+1, r1	; 0x01
    1f26:	0e c0       	rjmp	.+28     	; 0x1f44 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	9b 81       	ldd	r25, Y+3	; 0x03
    1f32:	fc 01       	movw	r30, r24
    1f34:	e2 0f       	add	r30, r18
    1f36:	f3 1f       	adc	r31, r19
    1f38:	80 81       	ld	r24, Z
    1f3a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <UART_sendByte>
		i++;
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	8f 5f       	subi	r24, 0xFF	; 255
    1f42:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str){

	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	28 2f       	mov	r18, r24
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	fc 01       	movw	r30, r24
    1f50:	e2 0f       	add	r30, r18
    1f52:	f3 1f       	adc	r31, r19
    1f54:	80 81       	ld	r24, Z
    1f56:	88 23       	and	r24, r24
    1f58:	39 f7       	brne	.-50     	; 0x1f28 <UART_sendString+0x14>
		{
			UART_sendByte(*Str);
			Str++;
		}
	 *******************************************************************/
}
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */

void UART_receiveString(uint8 *Str){
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <UART_receiveString+0xa>
    1f70:	0f 92       	push	r0
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	9b 83       	std	Y+3, r25	; 0x03
    1f78:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    1f7a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	9b 81       	ldd	r25, Y+3	; 0x03
    1f86:	8c 01       	movw	r16, r24
    1f88:	02 0f       	add	r16, r18
    1f8a:	13 1f       	adc	r17, r19
    1f8c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <UART_recieveByte>
    1f90:	f8 01       	movw	r30, r16
    1f92:	80 83       	st	Z, r24
    1f94:	0f c0       	rjmp	.+30     	; 0x1fb4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	8f 5f       	subi	r24, 0xFF	; 255
    1f9a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa6:	8c 01       	movw	r16, r24
    1fa8:	02 0f       	add	r16, r18
    1faa:	13 1f       	adc	r17, r19
    1fac:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <UART_recieveByte>
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	e2 0f       	add	r30, r18
    1fc2:	f3 1f       	adc	r31, r19
    1fc4:	80 81       	ld	r24, Z
    1fc6:	83 32       	cpi	r24, 0x23	; 35
    1fc8:	31 f7       	brne	.-52     	; 0x1f96 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	e2 0f       	add	r30, r18
    1fd8:	f3 1f       	adc	r31, r19
    1fda:	10 82       	st	Z, r1

}
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	08 95       	ret

00001fec <__udivmodsi4>:
    1fec:	a1 e2       	ldi	r26, 0x21	; 33
    1fee:	1a 2e       	mov	r1, r26
    1ff0:	aa 1b       	sub	r26, r26
    1ff2:	bb 1b       	sub	r27, r27
    1ff4:	fd 01       	movw	r30, r26
    1ff6:	0d c0       	rjmp	.+26     	; 0x2012 <__udivmodsi4_ep>

00001ff8 <__udivmodsi4_loop>:
    1ff8:	aa 1f       	adc	r26, r26
    1ffa:	bb 1f       	adc	r27, r27
    1ffc:	ee 1f       	adc	r30, r30
    1ffe:	ff 1f       	adc	r31, r31
    2000:	a2 17       	cp	r26, r18
    2002:	b3 07       	cpc	r27, r19
    2004:	e4 07       	cpc	r30, r20
    2006:	f5 07       	cpc	r31, r21
    2008:	20 f0       	brcs	.+8      	; 0x2012 <__udivmodsi4_ep>
    200a:	a2 1b       	sub	r26, r18
    200c:	b3 0b       	sbc	r27, r19
    200e:	e4 0b       	sbc	r30, r20
    2010:	f5 0b       	sbc	r31, r21

00002012 <__udivmodsi4_ep>:
    2012:	66 1f       	adc	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	1a 94       	dec	r1
    201c:	69 f7       	brne	.-38     	; 0x1ff8 <__udivmodsi4_loop>
    201e:	60 95       	com	r22
    2020:	70 95       	com	r23
    2022:	80 95       	com	r24
    2024:	90 95       	com	r25
    2026:	9b 01       	movw	r18, r22
    2028:	ac 01       	movw	r20, r24
    202a:	bd 01       	movw	r22, r26
    202c:	cf 01       	movw	r24, r30
    202e:	08 95       	ret

00002030 <__prologue_saves__>:
    2030:	2f 92       	push	r2
    2032:	3f 92       	push	r3
    2034:	4f 92       	push	r4
    2036:	5f 92       	push	r5
    2038:	6f 92       	push	r6
    203a:	7f 92       	push	r7
    203c:	8f 92       	push	r8
    203e:	9f 92       	push	r9
    2040:	af 92       	push	r10
    2042:	bf 92       	push	r11
    2044:	cf 92       	push	r12
    2046:	df 92       	push	r13
    2048:	ef 92       	push	r14
    204a:	ff 92       	push	r15
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	ca 1b       	sub	r28, r26
    205a:	db 0b       	sbc	r29, r27
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	09 94       	ijmp

00002068 <__epilogue_restores__>:
    2068:	2a 88       	ldd	r2, Y+18	; 0x12
    206a:	39 88       	ldd	r3, Y+17	; 0x11
    206c:	48 88       	ldd	r4, Y+16	; 0x10
    206e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2070:	6e 84       	ldd	r6, Y+14	; 0x0e
    2072:	7d 84       	ldd	r7, Y+13	; 0x0d
    2074:	8c 84       	ldd	r8, Y+12	; 0x0c
    2076:	9b 84       	ldd	r9, Y+11	; 0x0b
    2078:	aa 84       	ldd	r10, Y+10	; 0x0a
    207a:	b9 84       	ldd	r11, Y+9	; 0x09
    207c:	c8 84       	ldd	r12, Y+8	; 0x08
    207e:	df 80       	ldd	r13, Y+7	; 0x07
    2080:	ee 80       	ldd	r14, Y+6	; 0x06
    2082:	fd 80       	ldd	r15, Y+5	; 0x05
    2084:	0c 81       	ldd	r16, Y+4	; 0x04
    2086:	1b 81       	ldd	r17, Y+3	; 0x03
    2088:	aa 81       	ldd	r26, Y+2	; 0x02
    208a:	b9 81       	ldd	r27, Y+1	; 0x01
    208c:	ce 0f       	add	r28, r30
    208e:	d1 1d       	adc	r29, r1
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	ed 01       	movw	r28, r26
    209c:	08 95       	ret

0000209e <itoa>:
    209e:	fb 01       	movw	r30, r22
    20a0:	9f 01       	movw	r18, r30
    20a2:	e8 94       	clt
    20a4:	42 30       	cpi	r20, 0x02	; 2
    20a6:	c4 f0       	brlt	.+48     	; 0x20d8 <itoa+0x3a>
    20a8:	45 32       	cpi	r20, 0x25	; 37
    20aa:	b4 f4       	brge	.+44     	; 0x20d8 <itoa+0x3a>
    20ac:	4a 30       	cpi	r20, 0x0A	; 10
    20ae:	29 f4       	brne	.+10     	; 0x20ba <itoa+0x1c>
    20b0:	97 fb       	bst	r25, 7
    20b2:	1e f4       	brtc	.+6      	; 0x20ba <itoa+0x1c>
    20b4:	90 95       	com	r25
    20b6:	81 95       	neg	r24
    20b8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ba:	64 2f       	mov	r22, r20
    20bc:	77 27       	eor	r23, r23
    20be:	0e 94 80 10 	call	0x2100	; 0x2100 <__udivmodhi4>
    20c2:	80 5d       	subi	r24, 0xD0	; 208
    20c4:	8a 33       	cpi	r24, 0x3A	; 58
    20c6:	0c f0       	brlt	.+2      	; 0x20ca <itoa+0x2c>
    20c8:	89 5d       	subi	r24, 0xD9	; 217
    20ca:	81 93       	st	Z+, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	a1 f7       	brne	.-24     	; 0x20ba <itoa+0x1c>
    20d2:	16 f4       	brtc	.+4      	; 0x20d8 <itoa+0x3a>
    20d4:	5d e2       	ldi	r21, 0x2D	; 45
    20d6:	51 93       	st	Z+, r21
    20d8:	10 82       	st	Z, r1
    20da:	c9 01       	movw	r24, r18
    20dc:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <strrev>

000020e0 <strrev>:
    20e0:	dc 01       	movw	r26, r24
    20e2:	fc 01       	movw	r30, r24
    20e4:	67 2f       	mov	r22, r23
    20e6:	71 91       	ld	r23, Z+
    20e8:	77 23       	and	r23, r23
    20ea:	e1 f7       	brne	.-8      	; 0x20e4 <strrev+0x4>
    20ec:	32 97       	sbiw	r30, 0x02	; 2
    20ee:	04 c0       	rjmp	.+8      	; 0x20f8 <strrev+0x18>
    20f0:	7c 91       	ld	r23, X
    20f2:	6d 93       	st	X+, r22
    20f4:	70 83       	st	Z, r23
    20f6:	62 91       	ld	r22, -Z
    20f8:	ae 17       	cp	r26, r30
    20fa:	bf 07       	cpc	r27, r31
    20fc:	c8 f3       	brcs	.-14     	; 0x20f0 <strrev+0x10>
    20fe:	08 95       	ret

00002100 <__udivmodhi4>:
    2100:	aa 1b       	sub	r26, r26
    2102:	bb 1b       	sub	r27, r27
    2104:	51 e1       	ldi	r21, 0x11	; 17
    2106:	07 c0       	rjmp	.+14     	; 0x2116 <__udivmodhi4_ep>

00002108 <__udivmodhi4_loop>:
    2108:	aa 1f       	adc	r26, r26
    210a:	bb 1f       	adc	r27, r27
    210c:	a6 17       	cp	r26, r22
    210e:	b7 07       	cpc	r27, r23
    2110:	10 f0       	brcs	.+4      	; 0x2116 <__udivmodhi4_ep>
    2112:	a6 1b       	sub	r26, r22
    2114:	b7 0b       	sbc	r27, r23

00002116 <__udivmodhi4_ep>:
    2116:	88 1f       	adc	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	5a 95       	dec	r21
    211c:	a9 f7       	brne	.-22     	; 0x2108 <__udivmodhi4_loop>
    211e:	80 95       	com	r24
    2120:	90 95       	com	r25
    2122:	bc 01       	movw	r22, r24
    2124:	cd 01       	movw	r24, r26
    2126:	08 95       	ret

00002128 <_exit>:
    2128:	f8 94       	cli

0000212a <__stop_program>:
    212a:	ff cf       	rjmp	.-2      	; 0x212a <__stop_program>
